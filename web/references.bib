@InProceedings{10.1007/978-3-030-17502-3_12,
author= {Ernst, Gidon and Huisman, Marieke and Mostowski, Wojciech and Ulbrich, Mattias},
title="VerifyThis -- Verification Competition with a Human Factor",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="176--195",
abstract="VerifyThis is a series of competitions that aims to evaluate the current state of deductive tools to prove functional correctness of programs. Such proofs typically require human creativity, and hence it is not possible to measure the performance of tools independently of the skills of its user. Similarly, solutions can be judged by humans only. In this paper, we discuss the role of the human in the competition setup and explore possible future changes to the current format. Regarding the impact of VerifyThis on deductive verification research, a survey conducted among the previous participants shows that the event is a key enabler for gaining insight into other approaches, and that it fosters collaboration and exchange.",
isbn="978-3-030-17502-3",
url= "https://link.springer.com/chapter/10.1007/978-3-030-17502-3_12"
}

@techreport{HuismanMonahanMueller2017_1000077160,
author       = {Huisman, Marieke and Monahan, Rosemary and Müller, Peter and Mostowski, Wojciech and Ulbrich, Mattias},
year         = {2017},
title        = {VerifyThis 2017 : A Program Verification Competition},
doi         = {10.5445/IR/1000077160},
institution  = {Karlsruher Institut für Technologie (KIT)},
issn         = {2190-4782},
series       = {Karlsruhe Reports in Informatics},
pagetotal    = {9},
language     = {english},
volume       = {2017},
number       = {10},
url={https://publikationen.bibliothek.kit.edu/1000077160}
}

@inproceedings{ARCADE2017:24_Challenges_in_Deductive,
  author    = {Reiner H\textbackslash{}"ahnle and Marieke Huisman},
  title     = {24 Challenges in Deductive Software Verification},
  booktitle = {ARCADE 2017. 1st International Workshop on Automated Reasoning: Challenges, Applications, Directions, Exemplary Achievements},
  editor    = {Giles Reger and Dmitriy Traytel},
  series    = {EPiC Series in Computing},
  volume    = {51},
  pages     = {37--41},
  year      = {2017},
  publisher = {EasyChair},
  bibsource = {EasyChair, https://easychair.org},
  issn      = {2398-7340},
  url       = {https://easychair.org/publications/paper/kdZ7},
  doi       = {10.29007/j2cm}
  }
  
@Inbook{Huisman2016,
author= {Huisman, Marieke and Ahrendt, Wolfgang and Grahl, Daniel and Hentschel, Martin},
editor="Ahrendt, Wolfgang
and Beckert, Bernhard
and Bubel, Richard
and H{\"a}hnle, Reiner
and Schmitt, Peter H.
and Ulbrich, Mattias",
title="Formal Specification with the Java Modeling Language",
bookTitle="Deductive Software Verification -- The KeY Book: From Theory to Practice",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="193--241",
abstract="This text is a general, self contained, and tool  independent introduction into the Java Modeling Language, JML. It  appears in a book about the KeY approach and tool for the  verification of Java software, because JML is the dominating  starting point of KeY style Java verification. However, this chapter  does not depend on any specific tool nor verification methodology in  any way. This introduction is written for all readers with an  interest in formal specification of software in general, and anyone  who wants to learn about the JML approach to specification in  particular.",
isbn="978-3-319-49812-6",
doi="10.1007/978-3-319-49812-6_7",
url="https://doi.org/10.1007/978-3-319-49812-6_7"
}

@book{b8dbe2be359242bf8f03dad396167e24,
title = "VerifyThis 2016: A Program Verification Competition",
abstract = "VerifyThis 2016 was a one-day program verification competition which took place on April 2nd, 2016 in Eindhoven, The Netherlands as part of the European Joint Conferences on Theory and Practice of Soft- ware (ETAPS 2016). It was the fifth instalment in the VerifyThis competition series. This article provides an overview of the VerifyThis 2016 event, the challenges that were posed during the competition, and a high-level overview of the solutions to these challenges. It concludes with the results of the competition.",
keywords = "Program Verification, EWI-27060, IR-100549, Competition, METIS-317220",
author = "Marieke Huisman and Rosemary Monahan and Peter Müller and Erik Poll",
note = "eemcs-eprint-27060",
year = "2016",
month = "6",
language = "Undefined",
series = "CTIT Technical Report Series",
publisher = "Centre for Telematics and Information Technology (CTIT)",
number = "TR-CTIT-16-07",
address = "Netherlands",
url = "https://research.utwente.nl/en/publications/verifythis-2016-a-program-verification-competition(b8dbe2be-3592-42bf-8f03-dad396167e24).html"
}
@inproceedings{Kandziora:2015:RAC:2786536.2786541,
 author = {Kandziora, Jorne and Huisman, Marieke and Bockisch, Christoph and Zaharieva-Stojanovski, Marina},
 title = {Run-time Assertion Checking of JML Annotations in Multithreaded Applications with e-OpenJML},
 booktitle = {Proceedings of the 17th Workshop on Formal Techniques for Java-like Programs},
 series = {FTfJP '15},
 year = {2015},
 isbn = {978-1-4503-3656-7},
 location = {Prague, Czech Republic},
 pages = {8:1--8:6},
 articleno = {8},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/2786536.2786541},
 doi = {10.1145/2786536.2786541},
 acmid = {2786541},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@phdthesis{DBLP:phd/hal/Hurlin09,
  author    = {Cl{\'{e}}ment Hurlin},
  title     = {Specification and Verification of Multithreaded Object-Oriented Programs
               with Separation Logic. (Sp{\'{e}}cification et v{\'{e}}rification
               de programmes orient{\'{e}}s objets en logique de s{\'{e}}paration)},
  school    = {University of Nice Sophia Antipolis, France},
  year      = {2009},
  url       = {https://tel.archives-ouvertes.fr/tel-00424979},
  timestamp = {Fri, 15 Jul 2016 22:10:33 +0200},
  biburl    = {https://dblp.org/rec/bib/phd/hal/Hurlin09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{DBLP:journals/jot/HaackH09,
  author    = {Christian Haack and Cl{\'{e}}ment Hurlin},
  title     = {Resource Usage Protocols for Iterators},
  journal   = {Journal of Object Technology},
  volume    = {8},
  number    = {4},
  pages     = {55--83},
  year      = {2009},
  url       = {https://doi.org/10.5381/jot.2009.8.4.a3},
  doi       = {10.5381/jot.2009.8.4.a3},
  timestamp = {Fri, 26 May 2017 22:54:46 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jot/HaackH09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/amast/HaackH08,
  author    = {Christian Haack and Cl{\'{e}}ment Hurlin},
  title     = {Separation Logic Contracts for a Java-Like Language with Fork/Join},
  booktitle = {Algebraic Methodology and Software Technology, 12th International
               Conference, {AMAST} 2008, Urbana, IL, USA, July 28-31, 2008, Proceedings},
  pages     = {199--215},
  year      = {2008},
  crossref  = {DBLP:conf/amast/2008},
  url       = {https://doi.org/10.1007/978-3-540-79980-1\_16},
  doi       = {10.1007/978-3-540-79980-1\_16},
  timestamp = {Tue, 14 May 2019 10:00:38 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/amast/HaackH08},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/amast/2008,
  editor    = {Jos{\'{e}} Meseguer and Grigore Rosu},
  title     = {Algebraic Methodology and Software Technology, 12th International
               Conference, {AMAST} 2008, Urbana, IL, USA, July 28-31, 2008, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {5140},
  publisher = {Springer},
  year      = {2008},
  url       = {https://doi.org/10.1007/978-3-540-79980-1},
  doi       = {10.1007/978-3-540-79980-1},
  isbn      = {978-3-540-79979-5},
  timestamp = {Tue, 14 May 2019 10:00:38 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/amast/2008},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Article{Huisman2015,
author={Huisman, Marieke and Klebanov, Vladimir and Monahan, Rosemary},
title="VerifyThis 2012",
journal="International Journal on Software Tools for Technology Transfer",
year="2015",
month="Nov",
day="01",
volume="17",
number="6",
pages="647--657",
abstract="VerifyThis 2012 was a 2-day verification competition that took place as part of the International Symposium on Formal Methods (FM 2012) on August 30--31, 2012, in Paris, France. It was the second installment in the VerifyThis series. After the competition, an open call solicited contributions related to the VerifyThis 2012 challenges and overall goals. As a result, seven papers were submitted and, after review and revision, included in this special issue. In this introduction to the special issue, we provide an overview of the VerifyThis competition series, an account of related activities in the area, and an overview of solutions submitted to the organizers both during and after the 2012 competition. We conclude with a summary of results and some remarks concerning future installments of VerifyThis.",
issn="1433-2787",
doi="10.1007/s10009-015-0396-8",
url="https://doi.org/10.1007/s10009-015-0396-8"
}

@InProceedings{10.1007/978-3-319-98938-9_3,
author="Boerman, Jan and Huisman, Marieke and Joosten, Sebastiaan",
editor="Furia, Carlo A.
and Winter, Kirsten",
title="Reasoning About JML: Differences Between KeY and OpenJML",
booktitle="Integrated Formal Methods",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="30--46",
abstract="To increase the impact and capabilities of formal verification, it should be possible to apply different verification techniques on the same specification. However, this can only be achieved if verification tools agree on the syntax and underlying semantics of the specification language and unfortunately, in practice, this is often not the case.",
isbn="978-3-319-98938-9",
url={https://link.springer.com/chapter/10.1007/978-3-319-98938-9_3}
}

@inproceedings{AmighiBHZ12,
    Author = {A. Amighi and Blom, S. and Huisman, M. and Zaharieva-Stojanovski, M.},
    Booktitle = {PLPV},
    Pages = {71--82},
    Publisher = {ACM},
    Title = {The {VerCors} Project: Setting Up Basecamp},
    Year = "2012",
    url_Link = {https://doi.org/10.1145/2103776.2103785}
}

@inproceedings{BlomDH15,
    Author = {S. Blom and S. Darabi and M. Huisman},
    Booktitle = FASE,
    Pages = {202--217},
    Series = lncs,
    Title = {{Verification of Loop Parallelisations}},
    Volume = {9033},
    Year = {2015},
    url = {https://link.springer.com/chapter/10.1007/978-3-662-46675-9_14}
}

@article{BlomHM14,
    Author      = {S. Blom and M. Huisman and M. Mihel\v{c}i\'{c}},
    Issn        = {0167-6423},
    Issue       = {part 3},
    Journal     = scp,
    Pages       = {376--388},
    Publisher   = elsevier,
    Title       = {{Specification and Verification of {GPGPU} Programs}},
    Volume      = 95,
    Year        = {2014},
    url         = {https://www.sciencedirect.com/science/article/pii/S0167642314001531}
}

@inproceedings{BlomHZ15,
    Author      = {Blom, S. and Huisman, M. and Zaharieva-Stojanovski, M.},
    Booktitle   = SEFM,
    Title       = {History-based verification of functional behaviour of concurrent programs},
    Year        = {2015},
    url         = {https://link.springer.com/chapter/10.1007/978-3-319-22969-0_6}
}

@article{Haack76303,
    Author      = {C. Haack and M. Huisman and C. Hurlin},
    Journal     = {Nieuwsbrief van de Nederlandse Vereniging voor Theoretische Informatica},
    Pages       = {13--23},
    Publisher   = {Nederlandse Vereniging voor Theoretische Informatica},
    Title       = {Permission-Based Separation Logic for Multithreaded Java Programs},
    Volume      = {15},
    Year        = {2011},
    url         = {https://research.utwente.nl/en/publications/permission-based-separation-logic-for-multi-threaded-java-program}
    }

@inproceedings{DBLP:conf/ifm/BlomDHO17,
  author    = {Stefan Blom and Saeed Darabi and Marieke Huisman and Wytse Oortwijn},
  title     = {The VerCors Tool Set: Verification of Parallel and Concurrent Software},
  booktitle = {{IFM}},
  series    = {Lecture Notes in Computer Science},
  volume    = {10510},
  pages     = {102--110},
  publisher = {Springer},
  year      = {2017},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-66845-1_7}
}

@inproceedings{DBLP:conf/pdp/AmighiBH16,
  author    = {Afshin Amighi and Stefan Blom and Marieke Huisman},
  title     = {VerCors: {A} Layered Approach to Practical Verification of Concurrent
               Software},
  booktitle = {{PDP}},
  pages     = {495--503},
  publisher = {{IEEE} Computer Society},
  year      = {2016},
  url       = {https://ieeexplore.ieee.org/abstract/document/7445381}
}

@inproceedings{DBLP:conf/fm/BlomH14,
  author    = {Stefan Blom and Marieke Huisman},
  title     = {The VerCors Tool for Verification of Concurrent Programs},
  booktitle = {{FM}},
  series    = {Lecture Notes in Computer Science},
  volume    = {8442},
  pages     = {127--131},
  publisher = {Springer},
  year      = {2014},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-06410-9_9}
}

@inproceedings{DBLP:conf/sfm/AmighiBDHMZ14,
  author    = {Afshin Amighi and Stefan Blom and Saeed Darabi and Marieke Huisman and Wojciech Mostowski and Marina Zaharieva{-}Stojanovski},
  title     = {Verification of Concurrent Systems with VerCors},
  booktitle = {{SFM}},
  series    = {Lecture Notes in Computer Science},
  volume    = {8483},
  pages     = {172--216},
  publisher = {Springer},
  year      = {2014},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-07317-0_5}
}

@inproceedings{AmighiAPLAS,
    Author      = {A. Amighi and S. Blom and M. Huisman},
    Booktitle   = {APLAS},
    Pages       = {255--274},
    Title       = {Resource Protection Using Atomics - Patterns and Verification},
    Year        = {2014},
    url         = {https://research.utwente.nl/en/publications/resource-protection-using-atomics-patterns-and-verifications}
    }
    
@inproceedings{DBLP:conf/birthday/HuismanJ18,
  author    = {Marieke Huisman and Sebastiaan J. C. Joosten},
  title     = {Towards Reliable Concurrent Software},
  booktitle = {Principled Software Development},
  pages     = {129--146},
  publisher = {Springer},
  year      = {2018},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-98047-8_9}
}
@inproceedings{DBLP:conf/isola/JoostenH18,
  author    = {Sebastiaan J. C. Joosten and Marieke Huisman},
  title     = {Static Code Verification Through Process Models},
  booktitle = {ISoLA {(3)}},
  series    = {Lecture Notes in Computer Science},
  volume    = {11246},
  pages     = {343--354},
  publisher = {Springer},
  year      = {2018},
  url       = {https://link.springer.com/chapter/10.1007%2F978-3-030-03424-5_23}
}
@inproceedings{DBLP:conf/isola/HuismanBDS18,
  author    = {Marieke Huisman and Stefan Blom and Saeed Darabi and Mohsen Safari},
  title     = {Program Correctness by Transformation},
  booktitle = {ISoLA {(1)}},
  series    = {Lecture Notes in Computer Science},
  volume    = {11244},
  pages     = {365--380},
  publisher = {Springer},
  year      = {2018},
  url       = {https://link.springer.com/chapter/10.1007/978-3-030-03418-4_22}
}

@inproceedings{DBLP:conf/issta/JoostenOSH18,
  author    = {Sebastiaan J. C. Joosten and Wytse Oortwijn and Mohsen Safari and Marieke Huisman},
  title     = {An exercise in verifying sequential programs with VerCors},
  booktitle = {{ISSTA/ECOOP} Workshops},
  pages     = {40--45},
  publisher = {{ACM}},
  year      = {2018},
  url       = {https://research.utwente.nl/en/publications/an-exercise-in-verifying-sequential-programs-with-vercors}
}

@inproceedings{DBLP:journals/corr/abs-1806-09851,
  author    = {Afshin Amighi and Marieke Huisman and Stefan Blom},
  title     = {Verification of Shared-Reading Synchronisers},
  booktitle = {MeTRiD@ETAPS},
  series    = {{EPTCS}},
  volume    = {272},
  pages     = {107--120},
  year      = {2018},
  url       = {https://arxiv.org/abs/1806.09851}
}

@article{DBLP:journals/sttt/HuismanKMT17,
  author    = {Marieke Huisman and Vladimir Klebanov and Rosemary Monahan and Michael Tautschnig},
  title     = {VerifyThis 2015 - {A} program verification competition},
  journal   = {{STTT}},
  volume    = {19},
  number    = {6},
  pages     = {763--771},
  year      = {2017},
  url       = {https://link.springer.com/article/10.1007/s10009-016-0438-x}
}

@inproceedings{DBLP:conf/nfm/DarabiBH17,
  author    = {Saeed Darabi and Stefan C. C. Blom and Marieke Huisman},
  title     = {A Verification Technique for Deterministic Parallel Programs},
  booktitle = {{NFM}},
  series    = {Lecture Notes in Computer Science},
  volume    = {10227},
  pages     = {247--264},
  year      = {2017},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-57288-8_17}
}

@inproceedings{DBLP:conf/vstte/OortwijnBGHZ17,
  author    = {Wytse Oortwijn and Stefan Blom and Dilian Gurov and Marieke Huisman and Marina Zaharieva{-}Stojanovski},
  title     = {An Abstraction Technique for Describing Concurrent Program Behaviour},
  booktitle = {{VSTTE}},
  series    = {Lecture Notes in Computer Science},
  volume    = {10712},
  pages     = {191--209},
  publisher = {Springer},
  year      = {2017},
  url       = {https://link.springer.com/chapter/10.1007/978-3-319-72308-2_12}
}

@inproceedings{DBLP:journals/corr/OortwijnBH16,
  author    = {Wytse Oortwijn and Stefan Blom and Marieke Huisman},
  title     = {Future-based Static Analysis of Message Passing Programs},
  booktitle = {{PLACES}},
  series    = {{EPTCS}},
  volume    = {211},
  pages     = {65--72},
  year      = {2016},
  url       = {https://arxiv.org/abs/1606.05942}
}

@article{DBLP:journals/corr/AmighiHHH14,
  author    = {Afshin Amighi and
               Christian Haack and
               Marieke Huisman and
               Cl{\'{e}}ment Hurlin},
  title     = {Permission-Based Separation Logic for Multithreaded Java Programs},
  journal   = {Logical Methods in Computer Science},
  volume    = {11},
  number    = {1},
  year      = {2015},
  url       = {https://lmcs.episciences.org/998}
}

@inproceedings{DBLP:conf/fase/Zaharieva-StojanovskiH14,
  author    = {Marina Zaharieva{-}Stojanovski and
               Marieke Huisman},
  title     = {Verifying Class Invariants in Concurrent Programs},
  booktitle = {{FASE}},
  series    = {Lecture Notes in Computer Science},
  volume    = {8411},
  pages     = {230--245},
  publisher = {Springer},
  year      = {2014},
  url       = {https://link.springer.com/chapter/10.1007/978-3-642-54804-8_16}
}

@book{c4fd4c231b0743a58ef1b41e7a574deb,
    title       = "VerifyThis2018: A Program Verification Competition",
    abstract    = "VerifyThis 2018 was a two-day program verification competition which took place on April 14 and 15,2018 in Thessaloniki, Greece as part of the European Joint Conferences on Theory and Practice of Software(ETAPS 2018). It was the sixth instalment in the VerifyThis competition series. This article provides an overview of the VerifyThis 2018 event, the challenges that were posed during the competition, and a high-level overview of the solutions to these challenges. It concludes with the results of the competition.",
    author      = "Marieke Huisman and Rosemary Monahan and Peter M{\"u}ller and Andrei Paskevich and Gidon Ernst",
    year        = "2019",
    month       = "1",
    language    = "English",
    url         = {https://hal.inria.fr/hal-01981937/}
}

@article{DBLP:journals/sttt/BlomH15,
  author    = {Stefan Blom and Marieke Huisman},
  title     = {Witnessing the elimination of magic wands},
  journal   = {{STTT}},
  volume    = {17},
  number    = {6},
  pages     = {757--781},
  year      = {2015},
  url       = {https://link.springer.com/article/10.1007/s10009-015-0372-3}
}
    
@phdthesis{Zaharieva15,
    Author = {M. Zaharieva-Stojanovski},
    Doi = {10.3990/1.9789036539241},
    Number = {15-375},
    School = {University of Twente},
    Series = {CTIT Ph.D. Thesis Series},
    Title = {{Closer to Reliable Software: Verifying Functional Behaviour of Concurrent Programs}},
    Year = {2015},
    url     = {https://research.utwente.nl/en/publications/closer-to-reliable-software-verifying-functional-behaviour-of-con},
    Bdsk-Url-1 = {https://doi.org/10.3990/1.9789036539241}
}
    
@phdthesis{e36589ceaad34ad595fd9fbd0626542b,
   title = "Verification of program parallelization",
    abstract = "This thesis presents a set of verification techniques based on permission-based separation logic to reason about the data race freedom and functional correctness of program parallelizations. Our reasoning techniques address different forms of high-level and low-level parallelization. For high-level parallel programs, we first define the Parallel Programming Language (PPL), a simple core language that captures the main features of deterministic parallel programming; then we discuss how PPL programs and consequently, real-world deterministic parallel programs (e.g. OpenMP programs) are verified. For low-level parallel programs, we specifically focus on reasoning about GPGPU kernels. At the end we discuss how the presented verification techniques are chained together to reason about the semantic equivalence of high-level parallel programs where they are automatically transformed to low-level parallel programs by a parallelizing compiler. Thus, effectively enabling a holistic verification solution for such parallelization frameworks.",
    author = "Saeed Darabi",
    note = "IPA Dissertation Series No. 2018-02 IDS PhD. Thesis Series No. 18-458",
    year = "2018",
    month = "3",
    day = "2",
    doi = "10.3990/1.9789036544849",
    language = "English",
    isbn = "978-90-365-4484-9",
    school = "University of Twente",
    url     = {https://research.utwente.nl/en/publications/verification-of-program-parallelization}
}

@phdthesis{7077aace92e5428aaa370770a09e2b7a,
    title       = "Specification and verification of synchronisation classes in Java: A practical approach",
    abstract    = "Digital services are becoming an essential part of our daily lives. To provide these services, efficient software plays an important role. Concurrent programming is a technique that developers can exploit to gain more performance. In a concurrent program several threads of execution simultaneously are being executed. Sometimes they have to compete to access shared resources, like memory. This race of accessing shared memories can cause unexpected errors. Programmers use synchronisation constructs to tame the concurrency and control the accesses. In order to develop reliable concurrent software, the correctness of these synchronisation constructs is crucial.In this thesis we use a program logic, called permission-based Separation Logic, to statically reason about the correctness of synchronisation constructs. The logic has the power to reason about correct ownership of threads regarding shared memory. A correctly functioning synchroniser is responsible for exchanging a correct permission when a thread requests access to the shared memory. We use our VERCORS verification tool-set to verify the correctness of various synchronisation constructs.In Chapter 1 we discuss the scope of the thesis. All the required technical background about permission-based Separation Logic and synchronisation classes is explained in Chapter 2. In Chapter 3 we discuss how threads' start and join as minimum synchronisation points can be verified. To verify correctness of the synchronisation classes we have to first specify expected behaviour of the classes. This is covered in Chapter 4. In this chapter we present a unified approach to abstractly describe the common behaviour of synchronisers. Using our specifications, one is able to reason about the correctness of the client programs that access the shared state through the synchronisers.The atomic classes of java.util.concurrent are the core element of every synchronisation construct implementation. In Chapter 5 and Chapter 6 we propose a specification for atomic classes. Using this contract, we verified the implementation of synchronisation constructs w.r.t to their specifications from Chapter 4. In our proposed contract the specification of the atomic classes is parameterized with the protocols and resource invariants. Based on the context, the parameters can be defined. In Chapter 7 we propose a verification stack where each layer of stack verifies one particular aspect of a specified concurrent program in which atomic operations are the main synchronisation constructs. We demonstrate how to verify that a non-blocking data structure is data-race free and well connected. Based on the result of the verification from the lower layers, upper layers can reason about the functional properties of the concurrent data structure.In Chapter 8 we present a sound specification and verification technique to reason about data race freedom and functional correctness of GPU kernels that use atomic operations as synchronisation mechanism.Finally, Chapter 9 concludes the thesis with future directions.",
    author      = "A. Amighi",
    note        = "CTIT Ph.D. thesis series No. 17-451 IPA dissertation series No. 2018-01",
    year        = "2018",
    month       = "1",
    day         = "17",
    doi         = "10.3990/1.9789036544399",
    language    = "English",
    isbn        = "978-90-365-4439-9",
    publisher   = "University of Twente",
    address     = "Netherlands",
    school      = "University of Twente",
    url         = {https://research.utwente.nl/en/publications/specification-and-verification-of-synchronisation-classes-in-java}
}

@MastersThesis{essay78496,
month = {July},
title = {Performance of program verification with VerCors},
author = {Henk {Mulder}},
year = {2019},
url = {http://essay.utwente.nl/78496/},
abstract = {Program verification is only as useful as its ability to produce results in a timely
manner. In this research we investigate what performance bottlenecks are in
the VerCors verification tool for concurrent programs. The aim is to identify
the cause of a performance bottleneck, in order to optimize the tool.
We introduce a technique to identify what properties of a program are more
difficult to verify. Using those results, we present solutions to two performance
bottlenecks that were identified: 1. An alternative encoding of arrays is implemented
in the tool which allows the tool to reason up to 4 times faster about
programs that make use of arrays. 2. Our research in generating triggers for
quantified expressions show that speedups up to 30% are possible. Though further
research is required to investigate if this solution can be generalized and
optimized further.}
}

@MastersThesis{essay71180,
 month = {November},
 title = {Reasoning about Active Object Programs},
 author = {J. {Zeilstra}},
 year = {2016},
 url = {http://essay.utwente.nl/71180/},
 abstract = {Proving the correctness is important to ensure faultless functionality. To prove the correctness of Active Object programs in Java, this research translates them to message passing programs.
Active Object are not a build-in feature of the Java programming language. For asynchronous method calls, we used the Java Future interface to return result values. We created a formal specification for the Java Future interface and proved a simple implementation correct using the VerCors tool set.
We implemented the communication to Active Objects using message passing with the MPJ Express library. To verify this implementation, the message passing library has been annotated and a definition of valid messages in this program is given. We also annotated our implementation, however we encountered problems annotating the returning of result values. The annotations require a lot of administrative overhead and are hard to get correct. 
Also the existing VerCors tool set is not capable yet to automatically verify the program, mainly because it lacks support for output parameters or sum notation in the process algebra for futures.}
}
